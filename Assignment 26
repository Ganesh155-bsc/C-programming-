Q) Write a program in C to search an element (number) from a set of numbers using Binary Search. If the numbers are not sorted, then you must sort the array. 

#include <stdio.h>
#include <stdlib.h>

// Function to sort the array using Bubble Sort
void bubbleSort(int arr[], int n) {
	int i,j;
    for ( i = 0; i < n-1; i++) {
        for ( j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// Binary Search function
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;

        // If the element is present at the middle itself
        if (arr[mid] == key)
            return mid;

        // If the element is present in the right half
        if (arr[mid] < key)
            low = mid + 1;

        // If the element is present in the left half
        else
            high = mid - 1;
    }

    // If the element is not present in the array
    return -1;
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
	int i;
    printf("Original Array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Step 1: Sort the array
    bubbleSort(arr, n);

    printf("Sorted Array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    int key;
    printf("Enter the element to search: ");
    scanf("%d", &key);

    // Step 2: Perform binary search
    int result = binarySearch(arr, 0, n - 1, key);

    if (result != -1)
        printf("Element %d is present at index %d.\n", key, result);
    else
        printf("Element %d is not present in the array.\n", key);

    return 0;
}
 

