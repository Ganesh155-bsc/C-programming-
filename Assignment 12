Q) Write a program in C to add two polynomials using linked list. 

#include <stdio.h>
#include <stdlib.h>

struct node {
    int coeff;  // Coefficient of the term
    int exp;    // Exponent of the term
    struct node *next;
};

// Function to create a new node
struct node *create_node(int coeff, int exp) {
    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    new_node->coeff = coeff;
    new_node->exp = exp;
    new_node->next = NULL;
    return new_node;
}

// Function to insert a new term at the end of the polynomial
void insert_term(struct node **start, int coeff, int exp) {
    struct node *new_node = create_node(coeff, exp);
    if (*start == NULL) {
        *start = new_node;
    } else {
        struct node *temp = *start;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
}

// Function to add two polynomials
struct node *add_polynomials(struct node *poly1, struct node *poly2) {
    struct node *result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insert_term(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insert_term(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coeff + poly2->coeff;
            if (sum != 0) {
                insert_term(&result, sum, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // If any terms are left in poly1
    while (poly1 != NULL) {
        insert_term(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    // If any terms are left in poly2
    while (poly2 != NULL) {
        insert_term(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void display_polynomial(struct node *start) {
    if (start == NULL) {
        printf("0\n");
        return;
    }
    struct node *temp = start;
    while (temp != NULL) {
        if (temp->exp == 0) {
            printf("%d", temp->coeff);
        } else {
            printf("%dx^%d", temp->coeff, temp->exp);
        }
        if (temp->next != NULL && temp->next->coeff > 0) {
            printf(" + ");
        }
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct node *poly1 = NULL, *poly2 = NULL, *result = NULL;

    // Inserting terms into first polynomial
    insert_term(&poly1, 5, 2);  // 5x^2
    insert_term(&poly1, 4, 1);  // 4x^1
    insert_term(&poly1, 2, 0);  // 2x^0

    // Inserting terms into second polynomial
    insert_term(&poly2, 3, 2);  // 3x^2
    insert_term(&poly2, 6, 1);  // 6x^1
    insert_term(&poly2, 1, 0);  // 1x^0

    printf("First Polynomial: ");
    display_polynomial(poly1);

    printf("Second Polynomial: ");
    display_polynomial(poly2);

    // Adding the two polynomials
    result = add_polynomials(poly1, poly2);

    printf("Resultant Polynomial: ");
    display_polynomial(result);

    return 0;
} 
 
